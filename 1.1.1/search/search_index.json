{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fiddler","text":"<p>Fiddler is a stream processor built in rust that uses a yaml based configuration file syntax to map together inputs, processors, and outputs into a stateless data pipeline.</p>"},{"location":"#configuration","title":"Configuration","text":"<pre><code>input:\n    stdin: {}\npipeline:\n  max_in_flight: 10\n  processors:\n    - python: \n        string: true\n        code: |\n            import json\n            msg = json.loads(root)\n            msg['Python'] = 'rocks'\n            root = json.dumps(msg)\noutput:\n  switch:\n    - check:\n        condition: '\\\"Hello World\\\" &gt; `5`'\n        output:\n          validate: \n            expected: []\n    - stdout: {}\n</code></pre> <p>The main inline message manipulation is provided by Python, and requires the Python shared library.</p> <p>To install the Python shared library on Ubuntu: <code>sudo apt install python3-dev</code> To install the Python shared library on RPM based distributions (e.g. Fedora, Red Hat, SuSE), install the <code>python3-devel</code> package.</p> <p>Any third party packages utilized in Python will have to be installed on the OS running fiddler.  </p> <p>The message format in and out is simple, the source of the event is stored in the local variable named <code>root</code>; and the output taken from executing the code is expected to be named <code>root</code>.  By default <code>root</code> is bytes of the message, unless the argument <code>string: true</code> is proved, in which case <code>root</code> is converted to a string.   Conditional execution of steps for processing, or selection of outputs can be obtained through the use of <code>check</code> and <code>switch</code> plugins.  For processing, it looks like: </p> <pre><code>- switch:\n    - check: \n        condition: '\\\"Hello World\\\" &lt;= `5`'\n        processors:\n            - python: \n                string: true\n                code: |\n                    import json\n                    new_string = f\\\"python: {root}\\\"\n                    root = new_string\n            - echo: {}\n    - label: my_cool_mapping\n        echo: {}\n</code></pre> <p> The condition format utilized jmespath syntax for evaluation.  As such, this can only be utilized with JSON documents.</p>"},{"location":"configuration","title":"Configuration","text":""},{"location":"configuration#basic-syntax","title":"Basic Syntax","text":"<pre><code>label: Label for Pipeline\nnum_threads: 3\ninput:\n  label: standard in\n  stdin: {}\nprocessors:\n  - noop: {}\n  - label: Split lines\n    lines: {}\noutput:\n  label: standard out\n  std: out\n</code></pre>"},{"location":"configuration#fields","title":"Fields","text":""},{"location":"configuration#label","title":"<code>label</code>","text":"<p>Descriptive label for the component.  (Pipeline, Input, Processor, Output)   Type: <code>string</code> Required: <code>false</code> </p>"},{"location":"configuration#num_threads","title":"<code>num_threads</code>","text":"<p>Number of processor and output threads to spawn in the pipeline Type: <code>int</code> Required: <code>false</code> [Default: number of CPUs]  </p>"},{"location":"configuration#input","title":"<code>input</code>","text":"<p>Valid input configuration.  See Inputs Type: <code>object</code> Required: <code>true</code> </p>"},{"location":"configuration#processors","title":"<code>processors</code>","text":"<p>An Array of processors to perform manipulation of messages.  See Processors Type: <code>array</code> Required: <code>true</code> </p>"},{"location":"configuration#output","title":"<code>output</code>","text":"<p>Valid output configuration.  See Outputs Type: <code>string</code> Required: <code>true</code> </p>"},{"location":"configuration#environmental-variables","title":"Environmental Variables","text":"<p>Fiddler supports handlebars style templating  and will replace values of configuration files with available environmental varialbes.  This is useful for dynamic or sensitive values; such as URLs and passowrds.  For example:  </p> <pre><code>output:\n  elasticsearch:\n    url: {{ ES_URL }}\n    username: elastic\n    password: {{ ES_PASS }}\n    index: flow\n    cert_validation: None\n    batching_policy:\n      size: 100\n      duration: 10s\n</code></pre>"},{"location":"getting_started","title":"Get Started","text":""},{"location":"getting_started#running-as-a-cli","title":"Running as a CLI","text":""},{"location":"getting_started#installation","title":"Installation","text":"<ol> <li>Grab a release for your OS here</li> <li>Install with Cargo <code>cargo install fiddler</code></li> <li>Build with Cargo <code>cargo build --release --features all</code></li> </ol>"},{"location":"getting_started#usage","title":"Usage","text":"<pre><code>Usage: fiddler &lt;COMMAND&gt;\n\nCommands:\n  lint  Data Stream processor CLI written in rust\n  run   Data Stream processor CLI written in rust\n  test  Data Stream processor CLI written in rust\n  help  Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help  Print help\n</code></pre>"},{"location":"getting_started#run","title":"Run","text":"<pre><code>Data Stream processor CLI written in rust\n\nUsage: fiddler run [OPTIONS]\n\nOptions:\n  -c, --config &lt;CONFIG&gt;\n  -l, --log-level &lt;LOG_LEVEL&gt;  [default: none] [possible values: info, debug, trace, error, none]\n  -h, --help                   Print help\n  -V, --version                Print version\n</code></pre> <ol> <li><code>fiddler run -c &lt;path_to_config_file&gt; [ -c ... ]</code></li> </ol>"},{"location":"getting_started#lint","title":"Lint","text":"<pre><code>Data Stream processor CLI written in rust\n\nUsage: fiddler lint [OPTIONS]\n\nOptions:\n  -c, --config &lt;CONFIG&gt;\n  -h, --help             Print help\n  -V, --version          Print version\n</code></pre> <ol> <li><code>fiddler lint -c &lt;path_to_config_file&gt; [ -c ... ]</code></li> </ol>"},{"location":"getting_started#test","title":"Test","text":"<pre><code>Data Stream processor CLI written in rust\n\nUsage: fiddler test [OPTIONS]\n\nOptions:\n  -c, --config &lt;CONFIG&gt;\n  -l, --log-level &lt;LOG_LEVEL&gt;  [default: none] [possible values: info, debug, trace, error, none]\n  -h, --help                   Print help\n  -V, --version                Print version\n</code></pre> <p>Tests within fiddler are designed to test the processing pipeline configuration.  The expected naming syntax is <code>&lt;filename&gt;_test.yaml</code>.  I.e. if you have a configuration <code>input.yaml</code>.  The expected filename is <code>input_test.yaml</code>.  </p> <p>The test file syntax is as follows:  </p> <pre><code>- name: name_of_test\n  inputs:\n   - list of expected input strings\n  expected_outputs:\n   - list of expected output strings\n</code></pre> <p>For example:  </p> <pre><code>- name: input_test\n  inputs:\n    - Hello World\n  expected_outputs: \n    - Hello World\n</code></pre> <ol> <li><code>fiddler-cli test -c &lt;path_to_configuration&gt;.yaml</code></li> </ol>"},{"location":"getting_started#integration","title":"Integration","text":"<p>Head on over to docs.rs to view the latest API reference for utilizing fiddler within your own applications.  </p>"},{"location":"inputs/About","title":"Input","text":"<p>The source of messages for fiddler are described as inputs.  There may only be one input per configuration item.  Input key names must be uniquely registered across all available fiddler inputs.</p> <pre><code>input:\n  label: standard in\n  stdin: {}\n</code></pre>"},{"location":"inputs/aws_sqs","title":"aws_sqs","text":"<p>Receive messages from an AWS SQS Queue</p> <pre><code>input:\n    aws_sqs:\n        queue_url: \"https://some_queue_url\"\n        endpoint_url: \"https://some_unique_endpoint\"\n        credentials:\n            access_key_id: \"AccessKey\"\n            secret_access_key: \"SecretKey\"\n            session_token: \"SessionToken\"\n        region: \"us-west-2\"\n</code></pre>"},{"location":"inputs/aws_sqs#metadata","title":"Metadata","text":"<p>All SQS Message attributes are inserted into metadata of the message</p>"},{"location":"inputs/aws_sqs#fields","title":"Fields","text":""},{"location":"inputs/aws_sqs#queue_url","title":"<code>queue_url</code>","text":"<p>AWS SQS Queue URL to utilize Type: <code>string</code> Required: <code>true</code> </p>"},{"location":"inputs/aws_sqs#endpoint_url","title":"<code>endpoint_url</code>","text":"<p>Custom AWS SQS Endpoint URL Type: <code>string</code> Required: <code>false</code> </p>"},{"location":"inputs/aws_sqs#credentials","title":"<code>credentials</code>","text":"<p>AWS Credentials Object to utilize.  If no credentials object is provided, fiddler will utilize standard SDK locations to pull in credentials. Type: <code>object</code> Properties: <code>access_key_id</code> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AWS Access Key ID \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Type: <code>string</code> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Required: <code>true</code> <code>secret_access_key</code> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AWS Secret Access Key \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Type: <code>string</code> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Required: <code>true</code> <code>session_token</code> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AWS Session Token \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Type: <code>string</code> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Required: <code>false</code>  Required: <code>false</code></p>"},{"location":"inputs/aws_sqs#credentials_1","title":"Credentials","text":"<p>Required IAM permissions to operate: - sqs:ReceiveMessage - sqs:DeleteMessage - sqs:ChangeMessageVisibility  </p>"},{"location":"inputs/file","title":"file","text":"<p>Receive messages from an AWS SQS Queue</p> <pre><code>input:\n    file:\n        filename: path_to_file\n        codec: Lines\n        position_filename: path_to_position_file\n</code></pre>"},{"location":"inputs/file#fields","title":"Fields","text":""},{"location":"inputs/file#filename","title":"<code>filename</code>","text":"<p>Path to the file to consume Type: <code>string</code> Required: <code>true</code> </p>"},{"location":"inputs/file#codec","title":"<code>codec</code>","text":"<p>Enum to outline the type of file reader to implement Type: <code>string</code> Accepted values:  <code>Lines</code>: Read the file line by line [default] <code>ToEnd</code>: Read the file in its entirity <code>Tail</code>: Read the file line by line, waiting for new data to be written  </p>"},{"location":"inputs/file#position_filename","title":"<code>position_filename</code>","text":"<p>Filename to track the position of tailed files Type: <code>string</code> Required: with <code>codec</code>: <code>Tail</code> </p>"},{"location":"inputs/stdin","title":"stdin","text":"<p>Read data from stdin by lines and forward to the pipeline</p> <pre><code>input:\n    stdin: {}\n</code></pre>"},{"location":"outputs/About","title":"Output","text":"<p>The sinks of fiddler are described as outputs.  There may only be one output per configuration item.  Output key names must be uniquely registered across all available fiddler outputs.</p> <pre><code>output:\n  label: standard out\n  stdout: {}\n</code></pre>"},{"location":"outputs/aws_sqs","title":"aws_sqs","text":"<p>Send messages to an AWS SQS Queue</p> <pre><code>output:\n    aws_sqs:\n        queue_url: \"https://some_queue_url\"\n        endpoint_url: \"https://some_unique_endpoint\"\n        credentials:\n            access_key_id: \"AccessKey\"\n            secret_access_key: \"SecretKey\"\n            session_token: \"SessionToken\"\n        region: \"us-west-2\"\n</code></pre>"},{"location":"outputs/aws_sqs#fields","title":"Fields","text":""},{"location":"outputs/aws_sqs#queue_url","title":"<code>queue_url</code>","text":"<p>AWS SQS Queue URL to utilize Type: <code>string</code> Required: <code>true</code> </p>"},{"location":"outputs/aws_sqs#endpoint_url","title":"<code>endpoint_url</code>","text":"<p>Custom AWS SQS Endpoint URL Type: <code>string</code> Required: <code>false</code> </p>"},{"location":"outputs/aws_sqs#credentials","title":"<code>credentials</code>","text":"<p>AWS Credentials Object to utilize.  If no credentials object is provided, fiddler will utilize standard SDK locations to pull in credentials. Type: <code>object</code> Properties: <code>access_key_id</code> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AWS Access Key ID \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Type: <code>string</code> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Required: <code>true</code> <code>secret_access_key</code> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AWS Secret Access Key \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Type: <code>string</code> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Required: <code>true</code> <code>session_token</code> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AWS Session Token \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Type: <code>string</code> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Required: <code>false</code>  Required: <code>false</code></p>"},{"location":"outputs/aws_sqs#credentials_1","title":"Credentials","text":"<p>Required IAM permissions to operate: - sqs:SendMessage</p>"},{"location":"outputs/drop","title":"drop","text":"<p>Discard messages sent to this output</p> <pre><code>output:\n    drop: {}\n</code></pre>"},{"location":"outputs/elasticsearch","title":"elasticsearch","text":"<p>Receive messages from an AWS SQS Queue</p> <pre><code>output:\n    elasticsearch:\n        url: https://127.0.0.1:9200\n        username: elastic\n        password: changeme\n        cloud_id: someId\n        index: my_index\n        cert_validation: Default\n</code></pre>"},{"location":"outputs/elasticsearch#fields","title":"Fields","text":""},{"location":"outputs/elasticsearch#url","title":"<code>url</code>","text":"<p>Elasticsearch URL to utilize Type: <code>string</code> Required: <code>true</code> </p>"},{"location":"outputs/elasticsearch#username","title":"<code>username</code>","text":"<p>Elasticsearch username to use Type: <code>string</code> Required: <code>false</code>.  </p>"},{"location":"outputs/elasticsearch#password","title":"<code>password</code>","text":"<p>Password for the elasticsearch user   Type: <code>string</code> Required: <code>false</code> </p>"},{"location":"outputs/elasticsearch#cloud_id","title":"<code>cloud_id</code>","text":"<p>Elasticsearch CloudID Type: <code>string</code> Required: <code>false</code>.  </p>"},{"location":"outputs/elasticsearch#index","title":"<code>index</code>","text":"<p>Elasticsearch index to utilize.  default behavior is to append <code>YYYY-MM-DD</code> to the index name.  i.e. index of <code>index</code> would send to <code>index-YYYY-MM-DD</code> where the date chosen is the date of ingest. Type: <code>string</code> Required: <code>true</code> </p>"},{"location":"outputs/elasticsearch#cert_validation","title":"<code>cert_validation</code>","text":"<p>Enum to identify which type of certification validation is utilized Type: <code>string</code> AcceptedValues: <code>Default</code>: default mechanisms utilized by elasticsearch's SDK [default] <code>None</code>: Do not perform certification validation   Required: <code>false</code> </p>"},{"location":"outputs/stdout","title":"stdout","text":"<p>Emit process messages to stdout</p> <pre><code>output:\n    stdout: {}\n</code></pre>"},{"location":"outputs/switch","title":"switch","text":"<p>Switch accepts an array of valid outputs and is expected to be utlized with the <code>check</code> output.  Switch will attempt each provided output; while failing to the next provided the error is returned is <code>ConditionalCheckfailed</code>.  Other encountered errors will be surfaced.</p> <pre><code>output:\n  switch: []\n</code></pre>"},{"location":"outputs/switch#check","title":"<code>check</code>","text":"<pre><code>output:\n  switch:\n    - check:\n        condition: '\\\"Hello World\\\" &gt; `5`'\n        output: \n          stdout: {}\"\n</code></pre>"},{"location":"outputs/switch#fields","title":"Fields","text":""},{"location":"outputs/switch#condition","title":"<code>condition</code>","text":"<p>Condition utilized for the execution of the output step utilizing jmespath syntax for evaluation.  As such, this can only be utilized with JSON documents. Type: <code>string</code> Required: <code>true</code> </p>"},{"location":"outputs/switch#output","title":"<code>output</code>","text":"<p>Valid fiddler output module Type: <code>object</code> Required: <code>true</code> </p>"},{"location":"processors/About","title":"Processors","text":"<p>Processors in fiddler handle all of the data transformation operations on the messages received from Inputs.  Each Processor receives a single Message and is expected to return one to many messages as a result.  Each result is forward along to processors later in the array; or to the desired output.</p> <pre><code>processors:\n  - label: lines\n    lines: {}\n  - label: noop\n    noop: {}\n  - label: pretty print\n    python:\n      string: true\n      code: |\n        import json\n        root = json.dumps(json.loads(root), indent=4)\n</code></pre>"},{"location":"processors/lines","title":"lines","text":"<p>Split the received message into multiple messages separated by lines</p> <pre><code>processors:\n    - lines: {}\n</code></pre>"},{"location":"processors/noop","title":"noop","text":"<p>performs no operation against the message</p> <pre><code>processors:\n    - noop: {}\n</code></pre>"},{"location":"processors/python","title":"python","text":"<p>Python is the primary source of inline message manipulation provided by Fiddler.  Any third party packages utilized in Python will have to be installed on the OS running fiddler.  </p> <pre><code>processors:\n    - python:\n        string: true\n        code: |\n            import json\n            new_string = f\\\"python: {root}\\\"\n            root = new_string\n\n</code></pre>"},{"location":"processors/python#fields","title":"Fields","text":""},{"location":"processors/python#string","title":"<code>string</code>","text":"<p>Indicate whether or not fiddler should convert the message to a string before invoking the python code.   Type: <code>string</code> Required: <code>false</code> [default: <code>false</code>]</p>"},{"location":"processors/python#code","title":"<code>code</code>","text":"<p>The python code to execute Type: <code>string</code> Required: <code>true</code> </p>"},{"location":"processors/python#usage","title":"Usage","text":"<p>The message is passed into the python code using a local variable <code>root</code>.  The output taken from the executed code is also taken from the local variable <code>root</code>.  By default <code>root</code> is bytes of the message, unless the argument <code>string: true</code> is proved, in which case <code>root</code> is converted to a string.</p>"},{"location":"processors/switch","title":"switch","text":"<p>Switch accepts an array of valid processors and is expected to be utlized with the <code>check</code> output.  Switch will attempt each provided processor; while failing to the next provided the error is returned is <code>ConditionalCheckfailed</code>.  Other encountered errors will be surfaced.</p> <pre><code>processors:\n  - switch: []\n</code></pre>"},{"location":"processors/switch#check","title":"<code>check</code>","text":"<pre><code>processors:\n  - switch:\n      - check:\n          condition: '\\\"Hello World\\\" &gt; `5`'\n          processros: \n            - noop: {}\"\n</code></pre>"},{"location":"processors/switch#fields","title":"Fields","text":""},{"location":"processors/switch#condition","title":"<code>condition</code>","text":"<p>Condition utilized for the execution of the processing step utilizing jmespath syntax for evaluation.  As such, this can only be utilized with JSON documents. Type: <code>string</code> Required: <code>true</code> </p>"},{"location":"processors/switch#output","title":"<code>output</code>","text":"<p>Valid fiddler output module Type: <code>object</code> Required: <code>true</code> </p>"}]}